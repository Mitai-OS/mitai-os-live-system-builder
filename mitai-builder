#!/usr/bin/env bash
#
#  Build process functions
#
#-----------------------------------------------------------------------------------------------------------------------------------------
#
#  To extend the script place function on appropriate place based on the following boilerplate:
#
function function-template {
  show-header "Name of step"
  # Function body here, ${variant_data_dir} holds the variant
  # lists disrectory
}
#
#  Note: Functions are executed in the order of declaration.
#
#-----------------------------------------------------------------------------------------------------------------------------------------
function validate-distro.ini {
    show-header "Validate distro.ini file"

    local errors=()

    for var in name user host grub_name userfullname  params keyboard base system_dir system_version flavour locale timezone live_media_path ; do
        if [ -z "${!var+x}" ]; then
            errors+=("Required variable '$var' is not set")
        elif [ -z "${!var}" ]; then
            errors+=("Required variable '$var' is set but empty")
        fi
    done

    local ext4_name_regex='^[a-zA-Z0-9._-]+$'
    local user_regex='^[a-z_][a-z0-9_-]*[$]?$'
    local host_regex='^(([a-zA-Z0-9][-a-zA-Z0-9]*)(\.)?)*[a-zA-Z0-9]$'

    local valid_locales=$(ls /usr/share/locale | grep -Ev "locale.alias")
    local valid_timezones=$(find /usr/share/zoneinfo/ ! -type d | cut -c 21-)
    local valid_keyboards=$(grep -E '^\s+[a-zA-Z]' /usr/share/X11/xkb/rules/evdev.lst | awk '{print $1}' | sort -u)

    if ! echo "$valid_timezones" | grep -qx "$timezone"; then
        errors+=("'$timezone' is invalid for 'timezone'")
    fi

    if [[ ! "$name" =~ $ext4_name_regex ]]; then
        errors+=("'name' field expects a name containing only letters, digits, dots, dashes, and underscores: '$name'")
    fi

    if [[ ! "$user" =~ $user_regex ]]; then
        errors+=("'user' field received an invalid Linux username: '$user'")
    fi

    if [[ ! "$host" =~ $host_regex ]]; then
        errors+=("'host' field has an invalid hostname: '$host'")
    fi

    if [[ "$grub_name" == *\"* ]]; then
        errors+=("'grub_name' cannot contain quotes: '$grub_name'")
    fi

    if [[ "$splash" == *"---"* ]]; then
        errors+=("'splash' cannot contain '---': '$splash'")
    fi

    if ! echo "$valid_keyboards" | grep -xq "$keyboard"; then
        errors+=("'keyboard' must be a valid evdev keyboard layout: '$keyboard'")
    fi

    if [[ -z "$base" ]]; then
        errors+=("'base' cannot be empty")
    fi

    if [[ ! "$system_dir" =~ $ext4_name_regex ]]; then
        errors+=("'system_dir' field expects a name containing only letters, digits, dots, dashes, and underscores: '$system_dir'")
    fi

    if [[ ! "$system_version" =~ $ext4_name_regex || "$system_version" == *" "* ]]; then
        errors+=("'system_version' is invalid (no spaces allowed): '$system_version'")
    fi

    if [[ -z "$flavour" ]]; then
        errors+=("'flavour' cannot be empty")
    fi

    if ! echo "$valid_locales" | grep -xq "$locale"; then
        errors+=("'locale' is invalid: '$locale'")
    fi

    if [[ ! "$live_media_path" =~ $ext4_name_regex || "$live_media_path" == *" "* ]]; then
        errors+=("'live_media_path' must not contain spaces and must match naming pattern: '$live_media_path'")
    fi

    if [ ${#errors[@]} -eq 0 ]; then
        echo "All fields filled in correctly"
        return
    fi

    echo "Found errors:"
    for error in "${errors[@]}"; do
        echo "  - $error"
    done

    if  [ "$step_count" = "$(grep '^function' ${script} | grep -Ev -- "EXIT|show-header|--|function-template" | wc -l)" ]; then
      echo
      exit 1
    fi
}

function download-image {
    show-header "Download ISO image"

    mkdir -p base

    [ -f "base/${flavour}.iso" ] && {
      echo "The file is already fully retrieved; nothing to do."
      return;
    }

    (
      cd base
      wget --quiet --show-progress -c "${url}" -O "${flavour}.iso"
    )
}

function extract-image {
    show-header "Extract image"

    (
      cd base
      osirrox -indev "${flavour}.iso" -extract /${live_media_path} .

      rm -f squashfs-root 
      rm -f filesystem.manifest
      rm -f filesystem.size
      rm -f filesystem.manifest-minimal-remove
      rm -f filesystem.manifest-remove
      rm -f filesystem.squashfs.gpg
    )
    echo
    mkdir -p chroot
    ln -s chroot/ squashfs-root
    unsquashfs -f base/filesystem.squashfs
    rm squashfs-root

    (
      cd "chroot"
      if [ -d "bin.usr-is-merged" ]; then
        rm -rf bin.usr-is-merged lib.usr-is-merged sbin.usr-is-merged
      fi
      if [ -f "${variant_data_dir}/sources.list" ]; then
        rm -rf etc/apt/sources.list
        cp "${variant_data_dir}/sources.list" etc/apt/sources.list
      fi
    )
}

function mount-virtual-fs {
    show-header "Initialize virtual FS"

    mkdir -p chroot/{dev/pts,run,proc,sys}

    --bind-mount
}

function prepare-base-image {
    show-header "Prepare base image" 

    # Fix permissions to /var/lib/apt/lists
    chroot "chroot" mkdir -p /var/lib/apt/lists
    chroot "chroot" chown -R _apt:root /var/lib/apt/lists

    # Keyboard layout
    sed -i "s/us/${keyboard}/g" "chroot/etc/default/keyboard"

    # Set locale to pt_BR
    chroot "chroot" sh -c "echo 'grub-pc grub-pc/install_devices_empty   boolean true'                  | debconf-set-selections"
    chroot "chroot" sh -c "echo 'locales locales/locales_to_be_generated multiselect pt_BR.UTF-8 UTF-8' | debconf-set-selections"
    chroot "chroot" sh -c "echo 'locales locales/default_environment_locale select pt_BR.UTF-8'         | debconf-set-selections"
    chroot "chroot" sh -c "echo 'debconf debconf/frontend select Noninteractive'                        | debconf-set-selections"

    echo '#!/bin/bash
if [ ! -L /etc ]; then
  mv /etc /usr/config
  ln -s /usr/config /etc

  mkdir -p "/'${system_dir}'/shared/accounts/"

  for file in passwd shadow group gshadow login.defs sudoers sudoers.d; do
    if [ ! -L "/etc/${file}" ]; then
      mv "/etc/${file}" "/mita-i/shared/accounts"
    fi
    ln -fs "/'${system_dir}'/shared/accounts/${file}" "/etc/${file}"
  done
fi
' > "chroot/usr/sbin/mita-i-etc-merge"
    chmod +x "chroot/usr/sbin/mita-i-etc-merge"

    mkdir -p  chroot/etc/etc/systemd/system/sysinit.target.wants/ \
              chroot/etc/systemd/system/                          \
              chroot/etc/xdg/autostart/
      
    echo '[Unit]
Description=Merge /etc with /usr
DefaultDependencies=no
Before=sysinit.target
ConditionPathIsSymbolicLink=!/etc

[Service]
Type=oneshot
ExecStart=/usr/sbin/mita-i-etc-merge
RemainAfterExit=yes

[Install]
WantedBy=sysinit.target
' > "chroot/etc/systemd/system/mita-i-etc-merge.service"
    chroot "chroot" ln -fs /etc/systemd/system/mita-i-etc-merge.service /etc/systemd/system/sysinit.target.wants/mita-i-etc-merge.service



    if [ -d "chroot/usr/share/plasma" ]; then
        mkdir -p "chroot/etc/xdg/autostart/"

        echo "
[Desktop Entry]
Type=Application
Exec=/bin/bash -c 'if grep -qw kde-plasma-lock /proc/cmdline; then qdbus org.kde.plasmashell /PlasmaShell evaluateScript "'"'"lockCorona(true)"'"'"; fi'
Hidden=false
NoDisplay=true
X-GNOME-Autostart-enabled=true
Name=Lock Plasma Panels If Kernel Arg Present

" > "chroot/etc/xdg/autostart/plasma-lock-panels.desktop"

    echo '

[KDE Action Restrictions][$i]
ghns=false

' >> chroot/etc/xdg/kdeglobals

        cp chroot/usr/share/plasma/desktoptheme/breeze-light/colors chroot/usr/share/plasma/desktoptheme/default
    fi
}

function enable-firewall {
  show-header "Enable Firewall" 

  echo "  - Block external system access"
  echo
  chroot "chroot" ufw default deny incoming | grep -v "^("
  echo
  echo "  - Allow access to external systems"
  echo
  chroot "chroot" ufw default allow outgoing | grep -v "^("
  echo
  echo "  - Enable UFW"
  echo
  chroot "chroot" ufw enable 2> /dev/null
  echo
}

function set-system-localization {
  show-header "Setting the system locale"

  echo " - Timezone"
  ln -sf "/usr/share/zoneinfo/${timezone}" chroot/etc/localtime

  echo " - Language"
  echo "LANG=${language}.UTF-8"   >  chroot/etc/default/locale
  echo "LC_ALL=${language}.UTF-8" >> chroot/etc/default/locale
  echo "${language}.UTF-8 UTF-8"  >> chroot/etc/locale.gen

  echo " - Keyboard"
  echo "KEYMAP=${keyboard}" > chroot/etc/vconsole.conf
  cat <<EOF > chroot/etc/default/keyboard
XKBLAYOUT="${keyboard}"
BACKSPACE="guess"
EOF
}

function apply-mitai-root-structure {
    show-header "Apply Mita'i OS root structure" 

    (
      cd "chroot"

      echo "  - Create Mita'i base directory"
      mkdir -p "${system_dir}/versions/"
      mkdir -p "${system_dir}/linux/"
      mkdir -p "${system_dir}/shared/accounts"
      mkdir -p "${system_dir}/shared/flatpaks"
      mkdir -p applications
      mkdir -p containers

      for file in passwd shadow group gshadow login.defs; do
        cp "etc/${file}" "${system_dir}/shared/accounts"
      done

      echo "  - Merge /boot with /usr"
      if [ ! -L "boot" ]; then
        mv boot usr/grub
        ln -s usr/grub boot
      fi

      echo "  - Merge /var with /usr"
      if [ ! -L "var" ]; then
        mv var usr/state
        ln -s usr/state var
      fi

      echo "  - Merge /opt with applications/thirdparty"
      if [ ! -L "opt" ]; then
        mv opt applications/thirdparty
        ln -s applications/thirdparty opt
      fi

      echo "  - Merge Flatpak with /applications"
      if [ ! -L "${system_dir}/shared/flatpaks/runtime" ]; then
        mkdir -p "/${system_dir}/shared/flatpaks"
        ln -s "/${system_dir}/shared/flatpaks"  var/lib/flatpak
        ln -s /applications "${system_dir}/shared/flatpaks/app"
        ln -s /containers "${system_dir}/shared/flatpaks/runtime"
      fi

      echo "  - Move /usr to Mita'i OS directory"
      if [ ! -L "usr" ]; then
        mv usr "${system_dir}/versions/${system_version}"
        ln -s "${system_dir}/versions/${system_version}" usr
        ln -s /usr "${system_dir}/system"
        # /etc/resolv.conf é um link relativo
        ln -fs /run "${system_dir}/versions/${system_version}/run"
      fi

      echo "  - Rename /home as /users"
      if [ ! -L "home" ]; then
        mv home/ users
        rm users/.directory
        ln -s users home
      fi

      echo "  - Rename /mnt as /mount"
      if [ ! -L "mnt" ]; then
        mv mnt/ mount
        ln -s mount mnt
      fi

      echo "  - Rename /media as /storage"
      if [ ! -L "media" ]; then
        mv media/ storage
        rm storage/.directory
        ln -s storage media
      fi

      echo "  - Merge /root with /users"
      if [ ! -L "root" ]; then
        mkdir -p home/root
        rm -rf root
        chown root:root home/root
        chmod 700 home/root
        ln -s home/root root
        chown root:root root
        chmod 700 root
      fi
    
      echo "  - Rename /tmp as /temp"
      if [ ! -L "tmp" ]; then
        mv tmp temp
        ln -s temp tmp
      fi


      echo "  - Populate Mita'i OS linux directory"
      if [ ! -L "${system_dir}/linux/processes" ]; then
        ln -fs /dev "${system_dir}/linux/devices"
        ln -fs /sys "${system_dir}/linux/kernel"
        ln -fs /run "${system_dir}/linux/runtime"
        ln -fs /proc "${system_dir}/linux/processes"
      fi


      # Generate the .hidden file
      echo "  - Hide Linux Filesystem Hierarchy"
      (
        echo "bin"
        echo "boot"
        echo "cdrom"
        echo "dev"
        echo "etc"
        echo "home"
        echo "lib"
        echo "lib64"
        echo "media"
        echo "mnt"
        echo "opt"
        echo "proc"
        echo "root"
        echo "rofs"
        echo "run"
        echo "sbin"
        echo "srv"
        echo "swapfile"
        echo "sys"
        echo "tmp"
        echo "usr"
        echo "var"
      ) > .hidden
    )
}

function generate-icons {
  show-header "Generate icons for / directories"

  (
    cd "chroot"

    echo "  - /applications"
    (
      echo "[Desktop Entry]"
      echo "Icon=folder-appimage"
    ) > applications/.directory

    echo "  - /containers"
    (
      echo "[Desktop Entry]"
      echo "Icon=folder-flatpak"
    ) > containers/.directory

    echo "  - /${system_dir}"
    (
      echo "[Desktop Entry]"
      echo "Icon=folder-root"
    ) > ${system_dir}/.directory
      echo "    - /${system_dir}/linux"
      (
        echo "[Desktop Entry]"
        echo "Icon=preferences-system-linux"
      ) > ${system_dir}/linux/.directory
      echo "    - /${system_dir}/versions"
      (
        echo "[Desktop Entry]"
        echo "Icon=preferences-git"
      ) > ${system_dir}/versions/.directory
      echo "    - /${system_dir}/shared"
      (
        echo "[Desktop Entry]"
        echo "Icon=folder-build"
      ) > ${system_dir}/shared/.directory

    echo "  - /mount"
    (
      echo "[Desktop Entry]"
      echo "Icon=drive-harddisk-root"
    ) > mount/.directory

    echo "  - /storage"
    (
      echo "[Desktop Entry]"
      echo "Icon=drive-harddisk"
    ) > storage/.directory

    echo "  - /users"
    (
      echo "[Desktop Entry]"
      echo "Icon=user-home"
    ) > users/.directory
  )
}

function remove-base-packages {
    show-header "Remove base packages" 

    # Remove snaps only to reduce ISO size, snaps are freinds :)
    rm -rf chroot/var/lib/snapd chroot/snap chroot/var/snap chroot/usr/lib/snapd
    mkdir -p chroot/var/lib/snapd chroot/var/snap chroot/usr/lib/snapd
    find chroot/etc/systemd -name "*snap*" -delete
    find chroot/etc/systemd -type d -name "*snap*" -exec rm -r {} +

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/remove-packages.lst" | sed '/^$/d' | xargs)" = "" ]; then
      echo "No packages to remove"
      return
    fi

    local installed_packages=$(mktemp)
    local packages_to_remove=$(mktemp)

    chroot "chroot" dpkg-query -W -f='${Package}\n' | sort -u > "${installed_packages}"
    sed 's|#.*||g' "${variant_data_dir}/remove-packages.lst" | sed '/^$/d' | tr ' ' '\n' | sort -u > "${packages_to_remove}"

    chroot "chroot" apt autoremove --purge $(comm -12 "${installed_packages}" "${packages_to_remove}" | xargs) -y   

    rm -rf "${installed_packages}" "${packages_to_remove}"
}

function install-debian-packages  {
    show-header "Install Debian packages outside repositories" 

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/debian-packages-urls.lst" | sed '/^$/d' | xargs)" = "" ]; then
      echo "No Debian packages to install"
      return
    fi
    echo "  - Downloading packages"
    echo
    mkdir -p "chroot/mita-i.debian-packages"
    wget --quiet --show-progress -P "chroot/mita-i.debian-packages" $(sed "s|#.*||g" "${variant_data_dir}/debian-packages-urls.lst"  | sed '/^$/d' | xargs)
    echo

    echo "  - Installing packages"
    echo
    chroot chroot /bin/bash -c "apt install -y /mita-i.debian-packages/*.deb"
    echo

    echo "  - Remove .deb files"
    echo
    rm -rf "chroot/mita-i.debian-packages"
    echo
}

function install-system-packages {
    show-header "Install extra packages" 

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/install-packages.lst" | sed '/^$/d' | xargs)" = "" ]; then
      echo "No packages to install"
      return
    fi

    local available_packages=$(mktemp)
    local packages_to_install=$(mktemp)

    apt list --all-versions | grep "/" | cut -d\/ -f1 | sort -u > "${available_packages}"
    sed 's|#.*||g' "${variant_data_dir}/install-packages.lst" | sed '/^$/d' | xargs | tr ' ' '\n' | sort -u > "${packages_to_install}"

    local missing=$(comm -13 "${available_packages}" "${packages_to_install}")
    if [ ! "${missing}" = "" ]; then
      echo
      echo "Missing packages:"
      echo "${missing}" | sed 's|^|  - |g'
    fi

    chroot "chroot" apt install $(comm -12 "${available_packages}" "${packages_to_install}" | xargs) -y

    rm -rf "${available_packages}" "${packages_to_install}"
}

function install-flapak-packages  {
    show-header "Install Flatpak packages" 

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/flatpaks.lst" | sed '/^$/d' | xargs)" = "" ]; then
      echo "No Flatpak packages to install"
      return
    fi
    echo "  - Checking for flatpak"
    if [ ! -f "chroot/usr/bin/flatpak" ]; then
        echo
        echo "Flatpak, not found, skipping..."
        echo
        return
    fi
    echo "  - Setup Flathub"
    echo
    echo "Fixing TSL issues with Flathub SSL on chroot..."
    chroot "chroot" apt install ca-certificates --reinstall --allow-downgrades -y
    echo
    chroot "chroot" flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    echo
    echo "  - Installing packages"
    echo
    chroot "chroot" flatpak install $(sed "s|#.*||g" "${variant_data_dir}/flatpaks.lst" | xargs) -y
    echo
}

function install-appimage-packages  {
    show-header "Install AppImage packages" 

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/appimages-urls.lst" | sed '/^$/d' | xargs)" = "" ]; then
      echo "No AppImage packages to install"
      return
    fi
    echo "  - Checking for Mita-i-appimage-installer"
    if [ ! -f "chroot/usr/bin/mita-i-appimage-installer" ]; then
        echo
        echo "Mita-i-appimage-installer, not found skipping..."
        echo
        return
    fi

    echo "  - Installing packages"
    echo
    chroot "chroot" mita-i-appimage-installer fetch $(sed "s|#.*||g" "${variant_data_dir}/appimages-urls.lst" | xargs) -y
    echo
}

function install-snap-packages  {
    show-header "Install Snaps packages" 

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/snaps.lst" | sed '/^$/d' | xargs)" = "" ]; then
      echo "No Snap packages to install"
      return
    fi
    echo "  - Checking for snapd"
    echo
    if [ ! -f "chroot/usr/bin/snap" ]; then
        echo
        echo "Snap support, not found skipping..."
        echo
    fi
    echo "  - Installing packages"
    echo
    chroot "chroot" snap install $(sed "s|#.*||g" "${variant_data_dir}/snaps.lst" | xargs) -y
    echo
}

function remove-packages-contents {
    show-header "Remove package contents" 

    mkdir -p chroot/etc/apt/preferences.d/

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/remove-packages-content.lst" | xargs)" = "" ]; then
      echo "No packages to remove contents"
      return
    fi

    for package in $(sed "s|#.*||g" "${variant_data_dir}/remove-packages-content.lst" | xargs); do
      echo "Removing '${package}' content"
      for file in $(cat "chroot/var/lib/dpkg/info/${package}.list"); do
        if [ -f "chroot/${file}" ]; then
          rm "chroot/${file}"
        fi
      done

      echo "  - Regenerate list file"
      (
        echo "/."
        echo "/etc"
        echo "/etc/apt"
        echo "/etc/apt/preferences.d"
        echo "/etc/apt/preferences.d/${package}"
      ) > chroot/var/lib/dpkg/info/${package}.list
      echo "  - Pinning release"
      (
        echo "Package: ${package}"
        echo "Pin: release *"
        echo "Pin-Priority: -1"
      ) > chroot/etc/apt/preferences.d/${package}
      echo "  - Generating md5sum of '/etc/apt/preferences.d/${package}'"
      chroot chroot/ md5sum "etc/apt/preferences.d/${package}" > chroot/var/lib/dpkg/info/${package}.md5sums

      echo "  - Holding package '${package}'"
      chroot "chroot" apt-mark hold "${package}" > /dev/null

      echo "  - Removing triggers"
      for trigger in conffiles postrm prerm postinst preinst shlibs triggers; do
        if [ -f "chroot/var/lib/dpkg/info/${package}.${trigger}" ]; then
          rm "chroot/var/lib/dpkg/info/${package}.${trigger}"
        fi
      done
      echo
    done 
    echo "  - Synchronizing DPKG and APT"
    echo 
    chroot chroot/ dpkg --clear-avail
    chroot chroot/ apt-get update
}

function pin-packages-version {
    show-header "Pin package versions" 

    mkdir -p chroot/etc/apt/preferences.d/

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/pin-packages-version.lst" | xargs)" = "" ]; then
      echo "No packages to pin version"
      return
    fi

    echo -n > chroot/etc/apt/preferences.d/pinned-packages

    for package in $(sed "s|#.*||g" "${variant_data_dir}/pin-packages-version.lst" | xargs); do
      echo "  - Pinning '${package}' version"
      (
        echo "Package: ${package}"
        echo "Pin: release *"
        echo "Pin-Priority: -1"
        echo
      ) >> chroot/etc/apt/preferences.d/pinned-packages
      echo "  - Holding package '${package}'"
      chroot "chroot" apt-mark hold "${package}" > /dev/null
    done 

    echo "  - Synchronizing DPKG and APT"
    echo
    chroot chroot/ dpkg --clear-avail
    chroot chroot/ apt-get update
}

function remove-system-files {
    show-header "Remove system files" 

    if [ "$(sed 's|#.*||g' "${variant_data_dir}/remove-system-files.lst" | xargs)" = "" ]; then
      echo "No packages to pin version"
      return
    fi
    
    for file in $(sed "s|#.*||g" "${variant_data_dir}/remove-system-files.lst" | xargs); do
      if [ -d "chroot/${file}" ]; then
        echo "  - Removing directory '${file}'"
        rm -rf "chroot/${file}"

        escaped_file=$(printf '%s\n' "${file}" | sed 's/[\/&]/\\&/g')
        sed -i "/${escaped_file}/d" chroot/var/lib/dpkg/info/*.list

        file=$(echo ${file} | cut -c 3- )
        escaped_file=$(printf '%s\n' "${file}" | sed 's/[\/&]/\\&/g')
        sed -i "/${escaped_file}/d" chroot/var/lib/dpkg/info/*.list
      fi
      
      if [ -f "chroot/${file}" ]; then
        echo "  - Removing file '${file}'"
        rm -f "chroot/${file}"

        escaped_file=$(printf '%s\n' "${file}" | sed 's/[\/&]/\\&/g')
        sed -i "/${escaped_file}$/d" chroot/var/lib/dpkg/info/*.list

        file=$(echo ${file} | cut -c 3- )
        escaped_file=$(printf '%s\n' "${file}" | sed 's/[\/&]/\\&/g')
        sed -i "/${escaped_file}$/d" chroot/var/lib/dpkg/info/*.list
      fi
    done 

    echo "  - Synchronizing DPKG and APT"
    echo
    chroot chroot/ dpkg --clear-avail
    chroot chroot/ apt-get update
}

function cleanup-system-image {
    show-header "Clear the system image" 

    echo "  - Hide useless itens from menu"
    mkdir -p chroot/usr/local/share/applications
    for file in $(sed "s|#.*||g" "${variant_data_dir}/hide-from-menu.lst" | xargs); do
      if [ -f "chroot/usr/local/share/applications/${file}" ]; then
        rm "chroot/usr/local/share/applications/${file}"
      fi
      cp "chroot/usr/share/applications/${file}" "chroot/usr/local/share/applications"
      sed -i 's|\[Desktop Entry]|[Desktop Entry]\nNoDisplay=true|g' "chroot/usr/local/share/applications/${file}"
    done

    if [ -f "chroot/usr/share/plymouth/themes/${system_dir}/${system_dir}.plymouth" ]; then
      echo "  - Setting up plymouth theme"
        rm "chroot/etc/alternatives/default.plymouth"
        ln -s "/usr/share/plymouth/themes/${system_dir}/${system_dir}.plymouth" chroot/etc/alternatives/default.plymouth
    fi

    echo "  - Recovering kernel and inird"
    echo
    local kernel=$(chroot chroot/ dpkg -l | grep linux-image-.*-generic | cut -d' ' -f 3)
    chroot "chroot" apt update
    chroot "chroot" apt install ${kernel} --reinstall --allow-downgrades -y
    echo
    
    echo "  - Cleaning up APT"
    chroot "chroot" apt clean

    echo "  - Cleaning up logs"
    chroot "chroot" find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;
}

function umount-virtual-fs {
    show-header "Finish virtual FS" 

    echo "RESUME=none"   > "chroot/etc/initramfs-tools/conf.d/resume"
    echo "FRAMEBUFFER=y" > "chroot/etc/initramfs-tools/conf.d/splash"

    --bind-umount

    # Cleanup history and cache
    rm -rf chroot/tmp/*
    rm -rf chroot/debian-packages    || true 2>&1 > /dev/null
    rm -rf chroot/lib.usr-is-merged  || true 2>&1 > /dev/null
    rm -rf chroot/sbin.usr-is-merged || true 2>&1 > /dev/null
}

function build-squashfs {
    show-header "Compress system image"

    mkdir -pv image/{boot/grub,${live_media_path},isolinux,preseed}

    # Manually called, is needed to umount binds before compression
    if  [ ! "$step_count" = "$(grep '^function' ${script} | grep -Ev -- "EXIT|show-header|--|function-template" | wc -l)" ]; then
      --bind-umount 2>&1 > /dev/null
    fi

    mksquashfs chroot image/${live_media_path}/filesystem.squashfs -comp xz -noappend

    # Manually called, is needed to mount binds after compression
    if  [ ! "$step_count" = "$(grep '^function' ${script} | grep -Ev -- "EXIT|show-header|--|function-template" | wc -l)" ]; then
      echo
      --bind-mount 2>&1 > /dev/null
    fi
}

function build-grub {
    show-header "Build GRUB image"

    cp --dereference chroot/boot/vmlinuz    image/${live_media_path}/vmlinuz
    cp --dereference chroot/boot/initrd.img image/${live_media_path}/initrd

    (
        sed "s|#.*||g;/^$/d;s|^|menuentry \"|g;s|$|\n  initrd /\${live_media_path}/initrd\n}\n|;s|: |\" {\n  linux |" "${variant_data_dir}/grub-entries.yaml"
        
        echo -e "\nmenuentry \"Reboot\" {\n  reboot\n}\n"
        echo -e "menuentry \"Shutdown\" {\n halt\n}"
    ) > image/boot/grub/loopback.cfg

    local escaped_user=$(printf '%s\n'             "$user"            | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_userfullname=$(printf '%s\n'     "$userfullname"    | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_host=$(printf '%s\n'             "$host"            | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_name=$(printf '%s\n'             "$name"            | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_grub_name=$(printf '%s\n'        "$grub_name"       | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_params=$(printf '%s\n'           "$params"          | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_keyboard=$(printf '%s\n'         "$keyboard"        | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_base=$(printf '%s\n'             "$base"            | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_live_media_path=$(printf '%s\n'  "$live_media_path" | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_system_dir=$(printf '%s\n'       "$system_dir"      | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_system_version=$(printf '%s\n'   "$system_version"  | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_flavour=$(printf '%s\n'          "$flavour"         | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_locale=$(printf '%s\n'           "$locale"          | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')
    local escaped_timezone=$(printf '%s\n'         "$timezone"        | sed -e 's/[\/&]/\\&/g;s/"/\\"/g')

    sed -i \
      -e "s/\${user}/$escaped_user/g"                       \
      -e "s/\${userfullname}/\"$escaped_userfullname\"/g"   \
      -e "s/\${host}/$escaped_host/g"                       \
      -e "s/\${name}/$escaped_name/g"                       \
      -e "s/\${grub_name}/$escaped_grub_name/g"             \
      -e "s/\${params}/$escaped_params/g"                   \
      -e "s/\${keyboard}/$escaped_keyboard/g"               \
      -e "s/\${base}/$escaped_base/g"                       \
      -e "s/\${system_dir}/$escaped_system_dir/g"           \
      -e "s/\${system_version}/$escaped_system_version/g"   \
      -e "s/\${flavour}/$escaped_flavour/g"                 \
      -e "s/\${locale}/$escaped_locale/g"                   \
      -e "s/\${timezone}/$escaped_timezone/g"               \
      -e "s/\${live_media_path}/$escaped_live_media_path/g" \
      image/boot/grub/loopback.cfg

    (
        echo
        echo "search --set=root --file /${name}"
        echo "insmod all_video"
        echo "set default=\"0\""
        echo "set timeout=15"
        
        echo "if loadfont /boot/grub/unicode.pf2 ; then"
        echo "    insmod gfxmenu"
        echo "	insmod jpeg"
        echo "	insmod png"
        echo "	set gfxmode=auto"
        echo "	insmod efi_gop"
        echo "	insmod efi_uga"
        echo "	insmod gfxterm"
        echo "	terminal_output gfxterm"
        echo "fi"
        echo
        cat "image/boot/grub/loopback.cfg"
    ) > image/isolinux/grub.cfg

    (
        echo "#define DISKNAME   ${name}"
        echo "#define TYPE       binary"
        echo "#define TYPEbinary 1"
        echo "#define ARCH       amd64"
        echo "#define ARCHamd64  1"
        echo "#define DISKNUM    1"
        echo "#define DISKNUM1   1"
        echo "#define TOTALNUM   0"
        echo "#define TOTALNUM0  1"
    ) > "image/README.diskdefines"
    
    (
        cd image
        touch "${name}"

        grub-mkstandalone                                   \
          --format=x86_64-efi                               \
          --output=isolinux/bootx64.efi                     \
          --locales=""                                      \
          --fonts="" "boot/grub/grub.cfg=isolinux/grub.cfg"

        (
            cd isolinux 
            dd if=/dev/zero of=efiboot.img bs=1M count=10
            mkfs.vfat efiboot.img
            mmd -i efiboot.img efi efi/boot
            mcopy -i efiboot.img ./bootx64.efi ::efi/boot/
        )
        
        grub-mkstandalone --format=i386-pc --output=isolinux/core.img                      \
          --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls"  \
          --modules="linux16 linux normal iso9660 biosdisk search" --locales="" --fonts="" \
          "boot/grub/grub.cfg=isolinux/grub.cfg"
          
        cat /usr/lib/grub/i386-pc/cdboot.img isolinux/core.img > isolinux/bios.img
    )
}

function build-iso {
    show-header "Generate ISO image"

    cd image
    bash -c '(find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt" > md5sum.txt)'
    mkdir -pv ../iso

    xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames        \
      -volid "${name}" -eltorito-boot boot/grub/bios.img            \
      -no-emul-boot -boot-load-size 4 -boot-info-table              \
      --eltorito-catalog boot/grub/boot.cat --grub2-boot-info       \
      --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img             \
      -eltorito-alt-boot -e /EFI/BOOT/BOOTX64.efi                   \
      -no-emul-boot -append_partition 2 0xef isolinux/efiboot.img   \
      -output "../iso/${name}-amd64.iso" -graft-points "."          \
        /boot/grub/bios.img=isolinux/bios.img                       \
        /EFI/BOOT/BOOTX64.efi=isolinux/efiboot.img
         
    md5sum ../iso/${name}-amd64.iso > ../iso/${name}-amd64.md5
    
    ISO=$(readlink -f ../iso/${name}-amd64.iso)

    cd ..
    
    [ -f "${ISO}" ] && {
        echo
        echo "  ISO image file: "
        echo "    "$( du -sh "${ISO}")
        echo

        exit 0
    }

    echo "Failed to generate ISO"
    exit 1
}
#-----------------------------------------------------------------------------------------------------------------------------------------
function show-header {
    current_step=$((current_step+1))
    local progress="${current_step}/${step_count}"

    echo
    echo "---------------------------------------------------------------------"
    echo "  Step ${progress} - ${1}" 
    echo "---------------------------------------------------------------------"
    echo
}
#-----------------------------------------------------------------------------------------------------------------------------------------
function EXIT {
    # Let's make everything as possible to keep base 
    # system on a consistent state
    {
        umount-virtual-fs
    } &> /dev/null
     2>&1 > /dev/null
}
trap EXIT EXIT
#-----------------------------------------------------------------------------------------------------------------------------------------
function --bind-umount {
    mounts=(
        "chroot/dev/pts"
        "chroot/dev"
        "chroot/proc"
        "chroot/run"
        "chroot/debian-packages"
    )

    for mount_point in "${mounts[@]}"; do
        while mountpoint -q "${mount_point}"; do
            echo "  - Unmounting ${mount_point}"
            umount -l "${mount_point}" 2>/dev/null
            sleep 0.5
        done
    done
}
#-----------------------------------------------------------------------------------------------------------------------------------------
function --help  {
  (echo "Mita'i OS System Builder - v1.0"
  echo -e "==========================================================================================================\n"
  echo "Usage:

    bash -EH mitai-builder [variation] [build phase]
  "

  echo Available variations:
  echo
  ls ../data/ | sort | sed 's|^|  * |'
  echo
  echo Available build phases:
  echo
  grep '^function' "${script}" | grep -Ev  -- "--|EXIT|function-template|show-header|mount-virtual-fs" | cut -d' ' -f2  | sort | sed 's|^|  * |'
  echo '
Notes:

  - For hotfixes use --chroot as build phase
  - Most build phases will fail if the system has not been built at least once.
  '
  echo -e "--------------------------------------------//------------------------------------------------------------\n"
  echo "The build system is adjusted by configuration files and groupped by variations inside 'data' directory"
  echo "each variation has your on directory inside data containing:"
  echo
  echo 'Internal software management files:

    * remove-packages.lst         => Package to be removed from system image
    * install-packages.lst        => Package to be installed on system image
    * remove-packages-content.lst => Packages that the content will be removed
    * hide-from-menu.lst          => Desktop files to hide from Menu
'
  echo -e "--------------------------------------------//------------------------------------------------------------\n"
  echo 'The external packages lists:

    * appimages-urls.lst        => AppImages URLs to download
    * flatpaks.lst              => Flatpak IDs (implies to add Flathub)
    * snaps.lst                 => Snaps from Snap Stores
    * debian-packages-urls.lst  => URLs to download .deb packages

Notes:

  - flatpaks.lst require flatpak package installed
  - snaps.lst require snapd package installed
  - appimages-urls.lst requires the following URL in debian-packages-urls.lst:
    https://github.com/Mitai-OS/mita-i-appimage/releases/download/continuous/mita-i-appimage-core.deb
  '

  echo -e "--------------------------------------------//------------------------------------------------------------\n"

  echo 'The distro.ini controller with the following fields:

    * grub_name        => Name displayed in the GRUB menu
    * host             => Machine hostname
    * keyboard         => Keyboard layout used by the system
    * live_media_path  => Path within the ISO where the system files are located
    * locale           => Default system locale and language
    * name             => Internal name of the operating system
    * params           => Parameters passed to the kernel
    * system_dir       => Name of the directory where the system is installed or mounted
    * system_version   => Operating system version
    * timezone         => Default time zone used by the system
    * user             => Default username
    * userfullname     => Full name displayed to the default user
    * flavour          => Base distribution variant (e.g. 24.04)
    * base             => Version of the base distribution used as the base of the system (like kubuntu)
'
  echo 'The grub-entries.yaml controller is a YAML to fill GRUB linux command line, the syntax:
  
  Display Name: command another-command

Note:
  - Do not put linux at start
  - You can fetch fields of distro.ini by using ${field} example do get user name use: ${user}
'
  ) | less --prompt="Press Enter to scroll"
}
function --bind-mount {
    echo "  - Mounting /dev"
    mount --bind /dev "chroot/dev"

    echo "  - Mounting /run"
    mount --bind /run "chroot/run"

    echo "  - Mounting /proc"
    chroot "chroot" mount none -t proc /proc

    echo "  - Mounting /dev/pts"
    chroot "chroot" mount none -t devpts /dev/pts
}
#-----------------------------------------------------------------------------------------------------------------------------------------
function --enter-chroot {
  show-header "Entering chroot now..."
  chroot "chroot"
}
#-----------------------------------------------------------------------------------------------------------------------------------------
script=$(readlink -f "${0}")
step_count=$(grep "^function" ${script} | grep -Ev -- "EXIT|show-header|--|function-template" | wc -l)
current_step=0
#-----------------------------------------------------------------------------------------------------------------------------------------
if [ "$SUDO_USER" ] && [ "$USER" = "$SUDO_USER" ]; then
    echo "This is script was made to run as sudo -EH"
    exit 1
fi
#-----------------------------------------------------------------------------------------------------------------------------------------
dependencies=(debootstrap mtools squashfs-tools xorriso casper lib32gcc-s1 grub-common grub-pc-bin grub-efi)
missing=""
for dep in ${dependencies[@]}; do
  dpkg -s ${dep} 2>/dev/null >/dev/null || {
    missing=" ${missing} ${dep}"
  }
done
#-----------------------------------------------------------------------------------------------------------------------------------------
cd "$(dirname "$(readlink -f "${0}")")"
#-----------------------------------------------------------------------------------------------------------------------------------------
if [ "${1}" = "--help" ]; then
  mkdir -p data
  cd data
  --help
  exit
fi
#-----------------------------------------------------------------------------------------------------------------------------------------
variant="${1}"

if [ ! -d "data" ]; then
  echo "Error: '${variant}' can't find 'data' directory"
  exit 1
fi

if echo "${variant}" | grep -qE '[ /]'; then
  echo "Error: '${variant}' can't contain spaces or /"
  exit 1
fi

if [ "${variant}" = "" ]; then
  echo "Warning: Variant not specified fallbacking to 'minimal'"
  variant="minimal"
fi

if [ ! -f "data/${variant}/distro.ini" ]; then
  echo "Error: 'data/${variant}/distro.ini' not found"
  exit 1
fi

variant_data_dir=$(readlink -f "./data/${variant}")
#-----------------------------------------------------------------------------------------------------------------------------------------
source "${variant_data_dir}/distro.ini"
#-----------------------------------------------------------------------------------------------------------------------------------------
iso_repository="https://cdimage.ubuntu.com/${flavour}/releases/${base}/release/"
iso_file=$(wget -q -O - "${iso_repository}" | grep -o "${flavour}-${base}.*amd64.iso" | head -n1)
url="https://cdimage.ubuntu.com/${flavour}/releases/${base}/release/${iso_file}"
#-----------------------------------------------------------------------------------------------------------------------------------------
mkdir -p ${variant}
cd ${variant}
mkdir -p iso chroot image/{boot/grub,${live_media_path},isolinux,preseed} ;
#-----------------------------------------------------------------------------------------------------------------------------------------
if [ "${2}" = "--help" ]; then
  --help has-variant
  exit
fi
#-----------------------------------------------------------------------------------------------------------------------------------------
command=${2}
#-----------------------------------------------------------------------------------------------------------------------------------------
if echo "${command}" | grep -q "^--url=" ; then
  url=$(echo "${command}" | cut -d= -f2-)
  command=${3}
fi
#-----------------------------------------------------------------------------------------------------------------------------------------
if [ "${command}" = "--chroot" ]; then
  --bind-mount
  --enter-chroot
  --bind-umount
  exit
fi
#-----------------------------------------------------------------------------------------------------------------------------------------
if [ ! "${command}" = "" ]; then
  option=$(grep '^function' "${script}" | grep -Ev "EXIT|show-header|--|function-template|mount-virtual-fs" | cut -d' ' -f2 | grep -- ^"${command}"$)
  if [ ! "${option}" == "" ]; then
    step_count=3

    show-header "Initialize virtual FS"
    --bind-mount

    unset option
    eval "'$(grep '^function' "${script}" | grep -Ev -- "EXIT|show-header|--|function-template|mount-virtual-fs" | cut -d' ' -f2 | grep -- ^${command}$)'"

    show-header "Finish virtual FS" 
    --bind-umount

    echo
    exit
  fi
  echo "Unknown option '${command}' availables:"
  echo
  grep '^function' "${script}" | grep -Ev -- "EXIT|show-header|--|function-template|mount-virtual-fs" | cut -d' ' -f2  | grep "" | sort | sed 's|^|  * |'
  echo
  exit 1
fi
#-----------------------------------------------------------------------------------------------------------------------------------------
eval "$(grep '^function' ${script} | grep -Ev -- "EXIT|show-header|--|function-template" | cut -d' ' -f2 | tr '\n' ';')"
#-----------------------------------------------------------------------------------------------------------------------------------------
